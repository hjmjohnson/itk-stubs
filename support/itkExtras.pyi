from typing import Any, AnyStr, Dict, List, Optional, Sequence, Union
import os

#NOTE: itk_type_interfaces contains annotations that can be be in the
#      main .py files because they would require loading
#      the modules and invalidate the benefits of LazyLoading
from ..itk_type_interfaces import *

fileiotype = AnyStr

# The following function only exists in the interface file
# to be used to verify that this file was read by the IDE
def itk_invalid_interface_test_function( dummy_arg1: int, dummy_arg2: Optional[float] = None ) -> str: ...

def output(input: Any): ...
def image(input: Any): ...
def set_nthreads(number_of_threads: int) -> None: ...
def get_nthreads() -> int: ...
def echo(obj: Any, f: Any=...) -> None: ...
def size(image_or_filter: itkImageOrImageSource_Proxie) -> Sequence[int]: ...
def physical_size(image_or_filter: itkImageOrImageSource_Proxie) -> Sequence[float]: ...
def spacing(image_or_filter: itkImageOrImageSource_Proxie) -> Sequence[float]: ...
def origin(image_or_filter: itkImageOrImageSource_Proxie) -> Sequence[float]: ...
def index(image_or_filter: itkImageOrImageSource_Proxie) -> Sequence[int]: ...
def region(image_or_filter: itkImageOrImageSource_Proxie): ...
def GetArrayFromImage(image_or_filter: itkImageOrImageSource_Proxie, keep_axes: bool=..., update: bool=..., ttype: Any=...) -> Any: ...
array_from_image = GetArrayFromImage

def GetArrayViewFromImage(image_or_filter: itkImageOrImageSource_Proxie, keep_axes: bool=..., update: bool=..., ttype: Any=...) -> Any: ...
array_view_from_image = GetArrayViewFromImage

def GetImageFromArray(arr: Any, is_vector: bool=..., ttype: Any=...) -> Any: ...
image_from_array = GetImageFromArray

def GetImageViewFromArray(arr: Any, is_vector: bool=..., ttype: Any=...) -> Any: ...
image_view_from_array = GetImageViewFromArray

def GetArrayFromVnlVector(vnl_vector: Any, ttype: Optional[Any] = ...): ...
array_from_vnl_vector = GetArrayFromVnlVector

def GetArrayViewFromVnlVector(vnl_vector: Any, ttype: Optional[Any] = ...): ...
array_view_from_vnl_vector = GetArrayFromVnlVector

def GetArrayFromVnlMatrix(vnl_matrix: Any, ttype: Optional[Any] = ...): ...
def GetArrayViewFromVnlMatrix(vnl_matrix: Any, ttype: Optional[Any] = ...): ...
array_from_vnl_matrix = GetArrayFromVnlMatrix

def GetVnlVectorFromArray(arr: Any, ttype: Optional[Any] = ...): ...
vnl_vector_from_array = GetVnlVectorFromArray

def GetVnlMatrixFromArray(arr: Any, ttype: Optional[Any] = ...): ...
vnl_matrix_from_array = GetVnlMatrixFromArray

def GetArrayFromMatrix(itk_matrix: Any): ...
array_from_matrix = GetArrayFromMatrix

def GetMatrixFromArray(arr: Any): ...
matrix_from_array = GetMatrixFromArray

def xarray_from_image(l_image: Any): ...
def image_from_xarray(data_array: Any): ...
def vtk_image_from_image(l_image: Any): ...
def image_from_vtk_image(vtk_image: Any): ...
def image_intensity_min_max(image_or_filter: itkImageOrImageSource_Proxie): ...
def range(image_or_filter: itkImageOrImageSource_Proxie): ...
def imwrite(image_or_filter: itkImageOrImageSource_Proxie, filename: fileiotype, compression: bool=...) -> None: ...
def imread(filename: fileiotype, pixel_type: Optional[Any]=..., fallback_only: bool=...) -> itkImage_Proxie: ...
def meshwrite(mesh: Any, filename: fileiotype, compression: bool=...) -> None: ...
def meshread(filename: fileiotype, pixel_type: Optional[Any]=..., fallback_only: bool=...) -> Any: ...
def search(s: str, case_sensitive: bool=...) -> List[str]: ...
def set_inputs(new_itk_object: Any, inargs: Optional[Sequence[Any]]=..., inkargs: Optional[Dict[str, Any]]=...) -> Any: ...

class templated_class:
    __cls__: Any = ...
    __templates__: Any = ...
    def __init__(self, cls: Any) -> None: ...
    def New(self, *args: Any, **kargs: Any): ...
    def __getitem__(self, template_parameters: Any): ...
    def check_template_parameters(self, template_parameters: Any) -> None: ...
    def add_template(self, name: str, params: Any) -> Any: ...
    def add_image_templates(self, *args: Any) -> None: ...
    class __templated_class_and_parameters__:
        __templated_class__: Any = ...
        __template_parameters__: Any = ...
        def __init__(self, l_templated_class: Any, l_template_parameters: Any) -> None: ...
        def New(self, *args: Any, **kargs: Any): ...
        def __call__(self, *args: Any, **kargs: Any): ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def __iter__(self) -> str: ...
    def has_key(self, key: str) -> Any: ...
    def __contains__(self, key: str) -> Any: ...
    def get(self, key: str, default: Optional[str]=...) -> Optional[str]: ...
    def __len__(self): ...

class pipeline:
    input: Any = ...
    filters: Any = ...
    def __init__(self, *args: Any, **kargs: Any) -> None: ...
    def connect(self, l_filter: Any) -> None: ...
    def append(self, l_filter: Any) -> None: ...
    def clear(self) -> None: ...
    def GetOutput(self, l_index: int=...) -> Any: ...
    def GetNumberOfOutputs(self) -> int: ...
    l_input: Any = ...
    def SetInput(self, l_input: Any) -> None: ...
    def GetInput(self): ...
    def Update(self): ...
    def UpdateLargestPossibleRegion(self): ...
    def UpdateOutputInformation(self) -> None: ...
    def __len__(self): ...
    def __getitem__(self, item: Any): ...
    def __call__(self, *args: Any, **kargs: Any): ...
    def expose(self, name: str, new_name: Optional[str]=..., position: int=...) -> Any: ...

class auto_pipeline(pipeline):
    current: Any = ...
    def __init__(self, *args: Any, **kargs: Any) -> None: ...
    def Start(self) -> None: ...
    @staticmethod
    def Stop() -> None: ...

def down_cast(obj: Any): ...
def attribute_list(inputobject: Any, name: str) -> Any: ...
def attributes_list(inputObject: Any, names: List[str]) -> Any: ...
def attribute_dict(inputobject: Any, name: str) -> Any: ...
def number_of_objects(image_or_filter: itkImageOrImageSource_Proxie) -> int: ...
def ipython_kw_matches(text: str) -> Any: ...
def template(cl: Any): ...
def ctype(s: str) -> Any: ...
def class_(obj: Any): ...
def python_type(object_ref: Any) -> str: ...

class TemplateTypeError(TypeError):
    def __init__(self, template_type: Any, input_type: Any): ...
